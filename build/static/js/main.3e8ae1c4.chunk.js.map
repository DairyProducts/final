{"version":3,"sources":["giphy.gif","Button.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","props","state","counter","flag","this","setState","onClick","e","Increment","className","href","React","Component","App","width","height","src","frameborder","allow","allowfullscreen","require","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,mC,gMCEtBC,E,kDAEjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,CACPC,QAAQ,EACRC,MAAK,GAJK,E,wDASdC,KAAKC,SAAS,CACVF,MAAK,M,+BAIJ,IAAD,OACJ,OACI,6BACI,4BAAQG,QAAS,SAACC,GAAD,OAAK,EAAKC,UAAUD,KAArC,KAGA,2BACEH,KAAKH,MAAME,KAAM,uBAAGM,UAAU,WAAWC,KAAK,2BAA7B,8BAAsF,S,GAvBrFC,IAAMC,W,KC+C3BC,MA5Cf,WACE,OACE,yBAAKJ,UAAU,OACb,4BAAQA,UAAU,cAEhB,4CACA,mFACA,mKAGA,4BAAI,sFACJ,6jBAKA,4BAAI,iFACJ,kjBAKA,4BAAI,6CACJ,qHAA0F,uBAAGA,UAAU,WAAWC,KAAK,+CAA7B,QAA1F,4BAEA,4BAAI,mDACJ,iFAEA,4BAAI,0DACJ,4BAAQI,MAAM,MAAMC,OAAO,MAAMC,IAAI,4CAA4CC,YAAY,IAC7FC,MAAM,0EAA0EC,iBAAe,IAC/F,4BAAI,gEACJ,4BAAQL,MAAM,MAAMC,OAAO,MAAMC,IAAI,qDAAqDC,YAAY,IACtGC,MAAM,0EAA0EC,iBAAe,IAC/F,4BAAI,wFAAJ,KACA,qDACA,4BAAI,wDACJ,yBAAKJ,OAAO,MAAMD,MAAM,MAAKE,IAAKI,EAAQ,GAAgBC,IAAI,UAC9D,kBAAC,EAAD,SC/BYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3e8ae1c4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/giphy.84167c2c.gif\";","import React, {Component} from 'react'\r\n\r\nexport default class Button extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            counter:0,\r\n            flag:false\r\n        };\r\n    }\r\n\r\n    Increment(){\r\n        this.setState({\r\n            flag:true\r\n        });\r\n    };\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <button onClick={(e)=>this.Increment(e)}>\r\n                .\r\n                </button>\r\n                <p>\r\n                {(this.state.flag)?<a className='App-link' href=\"https://bit.ly/weebcrft\">PLEASE GO HERE PLEASE AAAH</a>:\"\"}\r\n                </p>\r\n                    \r\n\r\n            </div>\r\n        );\r\n    }s\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport './Button.js'\nimport Button from './Button.js';\nimport './giphy.gif'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        \n        <h1>Hello there.</h1>\n        <h3>You are bored. I am bored. Let's be bored together.</h3>\n        <h4>Okay fine. Here are some stories you can read. Just make sure you read\n          these by yourself and that you are the only one in the room. \n        </h4>\n        <h5><b>The story about the kid who stuck his head in a toilet</b></h5>\n        <p>So there was this kid. He really enjoyed being the weird type, as people say. After a day of picking people's noses and dumping bottles of orange juice\n          on random people on the street, he decided to cool off. Instead of hopping into a pool like a normal, sane person, he decided to run into the nearest public bathroom,\n          crash into a stall, scream 'TALAHANIA', and dunked his head in the toilet. This moment was captured on numerous cell phones and posted all over Reddit, who prompted removed\n          all of the images because 'they were too violent'.\n        </p>\n        <h5><b>The story about the kid who really liked Fortnite</b></h5>\n        <p>We all know that Minecraft was and will always be the best game ever created, and that Fortnite is a trash salty tryhard game trying to prove it's better than Minecraft, but\n          it's not. So there was this kid who boasted about how much he played Fortnite. He also talked about how Fortnite was much better than Minecraft. Soon after, the 200 million+\n          people in the Minecraft Army captured the kid, and the decision was made to banish him to the Nether. I dunno what happened after that, I've never seen him in all my trips\n          down there.\n        </p>\n        <h5><b>Pig Cult AOUH</b></h5>\n        <p>The Pig Cult is the best established Minecraft cult in the entire universe. Just click <a className='App-link' href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">here</a>. Come on, don't be shy.\n        </p>\n        <h5><b>Just a thing to say</b></h5>\n        <p>Haikyuu is poop. Like I said, just a thing to say.\n        </p>\n        <h5><b>Something for you to watch</b></h5>\n        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/WtO3AHMBePY\" frameborder=\"0\" \n        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n        <h5><b>Some really epic music for y'all</b></h5>\n        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/-sentKzikd0\" frameborder=\"0\"\n        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n        <h5><b>If you really want you can friend me on Minecraft Bedrock</b> </h5>\n        <p>My IGN is DaireeProds.</p>\n        <h5><b>Here's something trippy.</b></h5>\n        <img height='500' width='800'src={require(\"./giphy.gif\")} alt=\"image\"/> \n        <Button></Button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}